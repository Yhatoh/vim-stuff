extends c

# conditionals
snippet if "if"
if(${1:cond}) {
	${0:code}
}
endsnippet

snippet if_else "if else"
if(${1:cond}) {
	${0:}
} else {
	${0:}
}
endsnippet

snippet if_elif_else "if elif else"
if(${1:c1}) {
	${0:}
} else if(${2:c2}) {
	${0:}
} else {
	${0:}
}
endsnippet

# cycles
snippet for "for"
for(${1:var}; ${2:c}; ${3:inc}) {
	${0:}
}
endsnippet

snippet while "while"
while(${1:c}) {
	${0:}
}
endsnippet

# function
snippet fun "function"
${1:ret} ${2:fun_name}(${3:args}) {
	${0:}
}
endsnippet

# struct
snippet struct "struct basic"
typedef struct ${1:struct_name} {
	${2:attrs}

	${3:const}(${4:args}) {}
} ${5:struct_name};
endsnippet

# data structures
snippet vector "vector"
vector<${1:T}> ${0:}
endsnippet

snippet stack "stack"
stack<${1:T}> ${0:}
endsnippet

snippet queue "queue"
queue<${1:T}> ${0:}
endsnippet

snippet map "map"
map<${1:T}, ${2:T}> ${0:}
endsnippet

snippet set "set"
set<${1:T}> ${0:}
endsnippet

snippet priority_queue "priority_queue"
priority_queue<${1:T}> ${0:}
endsnippet

# initial setup c++ files
snippet main "main"
#include <iostream>
using namespace std;

int main() {
	return 0;
}
endsnippet

snippet progcomp "progcomp"
#include <bits/stdc++.h>
using namespace std;

int main() {
	return 0;
}
endsnippet

# random stuff
snippet sortvector "sortvector"
sort(${1:vec}.begin(), ${2:vec}.end()); 
endsnippet

snippet debug "debug"
#define debug(x) cerr << #x << ": " << x << endl
endsnippet

snippet printvector "printvector"
template< typename T >
ostream& operator<<(ostream& os, const vector< T > &vec) {
	os << "[";
	for(uint64_t i = 0; i < vec.size(); i++) {
		os << vec[i];
		if(i != vec.size() - 1)
			os << ", ";
	}
	os << "]";
	return os;
}
endsnippet

snippet printmap "printmap"
template< typename T, typename T2 >
ostream& operator<<(ostream& os, const map< T, T2 > &m) {
	os << "{";
	for(auto p : m) {
		os << "(" << p.first << "," << p.second << ")";
		os << " ";
	}
	os << "}";
	return os;
}
endsnippet

snippet printpair "printpair"
template< typename T, typename T2 >
ostream& operator<<(ostream& os, const pair< T, T2 > &p) {
	os << "(" << p.first << "," << p.second << ")";
	return os;
}
endsnippet

# progcomp stuff
snippet magiclines "magiclines"
ios_base::sync_with_stdio(false); 
cin.tie(NULL);
cout.setf(ios::fixed);
cout.precision(4);
endsnippet

snippet definitions "definitions"
typedef vector< int > vi; typedef vector< vi > vvi;
typedef pair< int, int > pii; typedef vector< pii > vpii;
typedef vector< vpii > vvpii;
typedef long long ll; typedef vector< ll > vll;
typedef vector< vll > vvll; typedef pair< ll, ll > pll;
typedef vector< pll > vpll; typedef vector< vpll > vvpll;
endsnippet

snippet segmenttree "segmenttree"
template< class T >
struct SegmentTree {
	int N;
	vector< T > ST;
	T (*merge)(T, T);
	void build(int n, int l, int r, vector< T > &vs) {
		if(l == r) ST[n] = vs[l];
		else {
			build(n << 1, l, (l + r) >> 1, vs);
			build(n << 1 | 1, (l + r) >> 1 | 1, r, vs);
			ST[n] = merge(ST[n << 1], ST[n << 1 | 1]);
		}
	}
	SegmentTree(vector< T > &vs, T (*m)(T a, T b)) {
		merge = m;
		N = vs.size();
		ST.resize(4 * N + 3);
		build(1, 0, N - 1, vs);
	}
	T query(int i, int j) {
		return query(0, N - 1, 1, i, j);
	}
	T query(int l, int r, int n, int i, int j) {
		if(i <= l && r <= j) return ST[n];
		int mid = (l + r) >> 1;
		if(mid < i) return query(mid + 1, r, n << 1 | 1, i, j);
		if(mid >= j) return query(l, mid, n << 1, i, j);
		return merge(query(l, mid, n << 1, i, j),
								query(mid + 1, r, n << 1 | 1, i, j));
	}
	void update(int pos, T val) {
		update(0, N - 1, 1, pos, val);
	}
	void update(int l, int r, int n, int pos, T val) {
		if(r < pos || pos < l) return;
		if(l == r) ST[n] = val;
		else {
			int mid = (r + l) / 2;
			update(l, mid, n * 2, pos, val);
			update(mid + 1, r, n * 2 + 1, pos, val);
			ST[n] = merge(ST[n * 2], ST[n * 2 + 1]);
		}
	}
};
endsnippet

snippet dfs "dfs"
void DFS(int u) {
	visited[u] = 1;
	for(int v : G[u]) {
		if(!visited[v]) {
			DFS(v);
		}
	}
}
endsnippet

snippet bfs "bfs"
void BFS(int a) {
	queue<int> Q;
	D[a] = 0;
	Q.push(a);
	while(!Q.empty()) {
		int u = Q.front();
		Q.pop();
		for(int v : G[u]) {
			if(D[v] > D[u] + 1) {
				D[v] = D[u] + 1;
				Q.push(v);
			}
		}
	}
}
endsnippet

snippet dijsktra "dijsktra"
void Dijsktra(int a) {
	D[a] = 0;
	priority_queue< pii, vpii, greater<pi>> PQ;
	PQ.push(pi(0, a));
	while(!PQ.empty()) {
		int u = PQ.top().second;
		int d = PQ.top().first;
		PQ.pop();
		if(d > D[u]) continue;
		// only in case that final node exists
		if(u == f) continue 
		for(pi next : G[u]) {
			int v = next.first;
			int w = next.second;
			if(D[v] > D[u] + w) {
				D[v] = D[u] + w;
				PQ.push(pi(D[v], v));
			}
		}
	}
}
endsnippet

snippet floydwarshall "floydwarshall"
void FloydWarshall() {
	for(int k = 0; k < n; k++) {
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < n; j++) {
				D[i][j] = min(D[i][j], D[i][k] + D[k][j]);
			}
		}
	}
}
endsnippet

snippet unionfind "unionfind"
struct UnionFind {
	vector< int > e;
	UnionFind(int n) { e.assign(n, -1); }
	int find_set(int x) {
		return (e[x] < 0 ? x : e[x] = find_set(e[x]))
	}
	bool same_set(int x, int y) {
		return find_set(x) == find_set(y);
	}
	int size(int x) {
		return -e[find_set(x)];
	}
	bool union_set(int x, int y) {
		x = find_set(x), y = find_set(y);
		if(x == y) return 0;
		if(e[x] > e[y]) swap(x, y);
		e[x] += e[y], e[y] = x;
		return 1;'
	}
};
endsnippet

snippet rollinghashing "rollinghashing"
struct RollingHashing {
	ll p, m, ns;
	vector< ll > pows, hash;

	RollingHashing(string s, ll p_=31, ll m_=1e9 + 7) {
		// if WA then other p and other m
		// if still WA then double hashing
		// if still WA maybe is not the answer RH
		p = p_; m = m_;	
		ns = s.size();
		pows.resize(ns + 2);
		for(int i = 1; i < ns + 2; i++) 
			pows[i] = (pows[i - 1] * p) % m;
	
		hash.resize(ns + 1);
		hash[0] = 0;
		for(int i = 1; i <= ns; i++) {
			ll char_to_num = s[i - 1] - 'a' + 1;  
			ll prev_hash = hash[i - 1];
			hash[i] = ((char_to_num * pows[i - 1]) % m + prev_hash) % m; 
		}
	}
	
	ll compute_hashing(ll i, ll j) {
		return (hash[j] - hash[i - 1] + m) % m;
	}
};
endsnippet
